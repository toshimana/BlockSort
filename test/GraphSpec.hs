module GraphSpec (spec) where

import Test.Hspec
import Data.Map
import Linear

import Cost
import BlockColor 
import Graph
import GraphConstants

spec :: Spec
spec = do
    describe "createRotateBaseEdges" $ do
        it "sample01" $ do
            let (g,e,_,_,m,io,i) = createRotateBaseEdges graph_nodes graph_edges
            (g,e,m,io,i) `shouldBe` ([(127,NodeInfo (Green,V2 1.0 0.0)),(128,NodeInfo (Green,V2 (-1.0) 0.0)),(129,NodeInfo (None,V2 (-1.0) 0.0)),(130,NodeInfo (None,V2 1.0 0.0)),(123,NodeInfo (Green,V2 (-0.5) (-0.86602545))),(124,NodeInfo (Green,V2 0.5 0.86602545)),(125,NodeInfo (None,V2 0.5 0.86602545)),(126,NodeInfo (None,V2 (-0.5) (-0.86602545))),(119,NodeInfo (Red,V2 2.0 0.0)),(120,NodeInfo (Red,V2 (-2.0) 0.0)),(121,NodeInfo (Yellow,V2 (-2.0) 0.0)),(122,NodeInfo (Yellow,V2 2.0 0.0)),(115,NodeInfo (Yellow,V2 1.4641013 0.0)),(116,NodeInfo (Yellow,V2 (-1.4641013) 0.0)),(117,NodeInfo (Red,V2 (-1.4641013) 0.0)),(118,NodeInfo (Red,V2 1.4641013 0.0)),(111,NodeInfo (Blue,V2 2.0000002 0.0)),(112,NodeInfo (Blue,V2 (-2.0000002) 0.0)),(113,NodeInfo (Yellow,V2 (-2.0000002) 0.0)),(114,NodeInfo (Yellow,V2 2.0000002 0.0)),(107,NodeInfo (Green,V2 (-1.7320504) 1.0)),(108,NodeInfo (Green,V2 1.7320504 (-1.0))),(109,NodeInfo (Yellow,V2 1.7320504 (-1.0))),(110,NodeInfo (Yellow,V2 (-1.7320504) 1.0)),(103,NodeInfo (Green,V2 1.7320508 1.0)),(104,NodeInfo (Green,V2 (-1.7320508) (-1.0))),(105,NodeInfo (Blue,V2 (-1.7320508) (-1.0))),(106,NodeInfo (Blue,V2 1.7320508 1.0)),(99,NodeInfo (Blue,V2 1.0 1.7320509)),(100,NodeInfo (Blue,V2 (-1.0) (-1.7320509))),(101,NodeInfo (Yellow,V2 (-1.0) (-1.7320509))),(102,NodeInfo (Yellow,V2 1.0 1.7320509)),(95,NodeInfo (Blue,V2 (-1.0) 1.7320509)),(96,NodeInfo (Blue,V2 1.0 (-1.7320509))),(97,NodeInfo (Red,V2 1.0 (-1.7320509))),(98,NodeInfo (Red,V2 (-1.0) 1.7320509)),(91,NodeInfo (Red,V2 1.0000002 1.7320509)),(92,NodeInfo (Red,V2 (-1.0000002) (-1.7320509))),(93,NodeInfo (Yellow,V2 (-1.0000002) (-1.7320509))),(94,NodeInfo (Yellow,V2 1.0000002 1.7320509)),(87,NodeInfo (Red,V2 (-1.0) 1.7320509)),(88,NodeInfo (Red,V2 1.0 (-1.7320509))),(89,NodeInfo (Blue,V2 1.0 (-1.7320509))),(90,NodeInfo (Blue,V2 (-1.0) 1.7320509)),(83,NodeInfo (Red,V2 1.0 1.7320509)),(84,NodeInfo (Red,V2 (-1.0) (-1.7320509))),(85,NodeInfo (Green,V2 (-1.0) (-1.7320509))),(86,NodeInfo (Green,V2 1.0 1.7320509)),(79,NodeInfo (Red,V2 (-1.7320504) 1.0)),(80,NodeInfo (Red,V2 1.7320504 (-1.0))),(81,NodeInfo (Blue,V2 1.7320504 (-1.0))),(82,NodeInfo (Blue,V2 (-1.7320504) 1.0)),(75,NodeInfo (Green,V2 1.7320509 1.0)),(76,NodeInfo (Green,V2 (-1.7320509) (-1.0))),(77,NodeInfo (Blue,V2 (-1.7320509) (-1.0))),(78,NodeInfo (Blue,V2 1.7320509 1.0)),(71,NodeInfo (Green,V2 (-1.7320507) 1.0)),(72,NodeInfo (Green,V2 1.7320507 (-1.0))),(73,NodeInfo (Red,V2 1.7320507 (-1.0))),(74,NodeInfo (Red,V2 (-1.7320507) 1.0)),(67,NodeInfo (Yellow,V2 (-1.0) 1.7320509)),(68,NodeInfo (Yellow,V2 1.0 (-1.7320509))),(69,NodeInfo (Green,V2 1.0 (-1.7320509))),(70,NodeInfo (Green,V2 (-1.0) 1.7320509)),(63,NodeInfo (Yellow,V2 1.7320508 1.0)),(64,NodeInfo (Yellow,V2 (-1.7320508) (-1.0))),(65,NodeInfo (Red,V2 (-1.7320508) (-1.0))),(66,NodeInfo (Red,V2 1.7320508 1.0)),(59,NodeInfo (Blue,V2 (-0.7320509) 2.732051)),(60,NodeInfo (Blue,V2 0.7320509 (-2.732051))),(61,NodeInfo (Green,V2 0.7320509 (-2.732051))),(62,NodeInfo (Green,V2 (-0.7320509) 2.732051)),(55,NodeInfo (Blue,V2 (-1.7320509) 1.0)),(56,NodeInfo (Blue,V2 1.7320509 (-1.0))),(57,NodeInfo (Red,V2 1.7320509 (-1.0))),(58,NodeInfo (Red,V2 (-1.7320509) 1.0)),(51,NodeInfo (Yellow,V2 1.7320504 1.0)),(52,NodeInfo (Yellow,V2 (-1.7320504) (-1.0))),(53,NodeInfo (Red,V2 (-1.7320504) (-1.0))),(54,NodeInfo (Red,V2 1.7320504 1.0)),(47,NodeInfo (Yellow,V2 (-1.7320509) 1.0)),(48,NodeInfo (Yellow,V2 1.7320509 (-1.0))),(49,NodeInfo (Green,V2 1.7320509 (-1.0))),(50,NodeInfo (Green,V2 (-1.7320509) 1.0)),(43,NodeInfo (Yellow,V2 3.4641013 0.0)),(44,NodeInfo (Yellow,V2 (-3.4641013) 0.0)),(45,NodeInfo (Blue,V2 (-3.4641013) 0.0)),(46,NodeInfo (Blue,V2 3.4641013 0.0)),(39,NodeInfo (Blue,V2 1.7320507 1.0)),(40,NodeInfo (Blue,V2 (-1.7320507) (-1.0))),(41,NodeInfo (Green,V2 (-1.7320507) (-1.0))),(42,NodeInfo (Green,V2 1.7320507 1.0)),(35,NodeInfo (Blue,V2 (-1.7320508) 1.0)),(36,NodeInfo (Blue,V2 1.7320508 (-1.0))),(37,NodeInfo (Yellow,V2 1.7320508 (-1.0))),(38,NodeInfo (Yellow,V2 (-1.7320508) 1.0)),(31,NodeInfo (Blue,V2 3.4641016 0.0)),(32,NodeInfo (Blue,V2 (-3.4641016) 0.0)),(33,NodeInfo (Yellow,V2 (-3.4641016) 0.0)),(34,NodeInfo (Yellow,V2 3.4641016 0.0)),(27,NodeInfo (Red,V2 0.7320508 2.732051)),(28,NodeInfo (Red,V2 (-0.7320508) (-2.732051))),(29,NodeInfo (Green,V2 (-0.7320508) (-2.732051))),(30,NodeInfo (Green,V2 0.7320508 2.732051)),(23,NodeInfo (Red,V2 1.7320508 1.0)),(24,NodeInfo (Red,V2 (-1.7320508) (-1.0))),(25,NodeInfo (Yellow,V2 (-1.7320508) (-1.0))),(26,NodeInfo (Yellow,V2 1.7320508 1.0)),(19,NodeInfo (Red,V2 3.4641016 0.0)),(20,NodeInfo (Red,V2 (-3.4641016) 0.0)),(21,NodeInfo (Blue,V2 (-3.4641016) 0.0)),(22,NodeInfo (Blue,V2 3.4641016 0.0)),(1,NodeInfo (Red,V2 0.0 0.0)),(2,NodeInfo (Blue,V2 3.4641016 0.0)),(3,NodeInfo (Yellow,V2 6.928203 0.0)),(4,NodeInfo (Blue,V2 10.392304 0.0)),(5,NodeInfo (Yellow,V2 1.7320508 1.0)),(6,NodeInfo (Green,V2 5.196152 1.0)),(7,NodeInfo (Red,V2 8.660254 1.0)),(8,NodeInfo (Red,V2 3.4641016 2.0)),(9,NodeInfo (Blue,V2 6.928203 2.0)),(10,NodeInfo (Green,V2 0.7320508 2.732051)),(11,NodeInfo (Green,V2 9.660254 2.732051)),(12,NodeInfo (Blue,V2 2.4641016 3.732051)),(13,NodeInfo (Yellow,V2 4.464102 3.732051)),(14,NodeInfo (Red,V2 5.928203 3.732051)),(15,NodeInfo (Yellow,V2 7.928203 3.732051)),(16,NodeInfo (None,V2 0.0 0.0)),(17,NodeInfo (None,V2 0.23205078 1.8660254)),(18,NodeInfo (None,V2 10.660254 2.732051))],[(127,130,Cost 0.0),(129,128,Cost 0.0),(123,126,Cost 0.0),(125,124,Cost 0.0),(119,122,Cost 2.0),(121,120,Cost 2.0),(115,118,Cost 1.4640889),(117,116,Cost 1.4640889),(111,114,Cost 2.0),(113,112,Cost 2.0),(107,110,Cost 2.0),(109,108,Cost 2.0),(103,106,Cost 2.0),(105,104,Cost 2.0),(99,102,Cost 2.0),(101,100,Cost 2.0),(95,98,Cost 2.0),(97,96,Cost 2.0),(91,94,Cost 2.0),(93,92,Cost 2.0),(87,90,Cost 2.0),(89,88,Cost 2.0),(83,86,Cost 2.0),(85,84,Cost 2.0),(79,82,Cost 2.0),(81,80,Cost 2.0),(75,78,Cost 2.0),(77,76,Cost 2.0),(71,74,Cost 2.0),(73,72,Cost 2.0),(67,70,Cost 2.0),(69,68,Cost 2.0),(63,66,Cost 2.0),(65,64,Cost 2.0),(59,62,Cost 2.8284445),(61,60,Cost 2.8284445),(55,58,Cost 2.0),(57,56,Cost 2.0),(51,54,Cost 2.0),(53,52,Cost 2.0),(47,50,Cost 2.0),(49,48,Cost 2.0),(43,46,Cost 3.464089),(45,44,Cost 3.464089),(39,42,Cost 2.0),(41,40,Cost 2.0),(35,38,Cost 2.0),(37,36,Cost 2.0),(31,34,Cost 3.464089),(33,32,Cost 3.464089),(27,30,Cost 2.8284445),(29,28,Cost 2.8284445),(23,26,Cost 2.0),(25,24,Cost 2.0),(19,22,Cost 3.464089),(21,20,Cost 3.464089)],ChildToParent (fromList [(19,1),(20,1),(21,2),(22,2),(23,1),(24,1),(25,5),(26,5),(27,1),(28,1),(29,10),(30,10),(31,2),(32,2),(33,3),(34,3),(35,2),(36,2),(37,5),(38,5),(39,2),(40,2),(41,6),(42,6),(43,3),(44,3),(45,4),(46,4),(47,3),(48,3),(49,6),(50,6),(51,3),(52,3),(53,7),(54,7),(55,4),(56,4),(57,7),(58,7),(59,4),(60,4),(61,11),(62,11),(63,5),(64,5),(65,8),(66,8),(67,5),(68,5),(69,10),(70,10),(71,6),(72,6),(73,8),(74,8),(75,6),(76,6),(77,9),(78,9),(79,7),(80,7),(81,9),(82,9),(83,7),(84,7),(85,11),(86,11),(87,8),(88,8),(89,12),(90,12),(91,8),(92,8),(93,13),(94,13),(95,9),(96,9),(97,14),(98,14),(99,9),(100,9),(101,15),(102,15),(103,10),(104,10),(105,12),(106,12),(107,11),(108,11),(109,15),(110,15),(111,12),(112,12),(113,13),(114,13),(115,13),(116,13),(117,14),(118,14),(119,14),(120,14),(121,15),(122,15),(123,10),(124,10),(125,17),(126,17),(127,11),(128,11),(129,18),(130,18)]),InnerToOuter (fromList [(20,19),(22,21),(24,23),(26,25),(28,27),(30,29),(32,31),(34,33),(36,35),(38,37),(40,39),(42,41),(44,43),(46,45),(48,47),(50,49),(52,51),(54,53),(56,55),(58,57),(60,59),(62,61),(64,63),(66,65),(68,67),(70,69),(72,71),(74,73),(76,75),(78,77),(80,79),(82,81),(84,83),(86,85),(88,87),(90,89),(92,91),(94,93),(96,95),(98,97),(100,99),(102,101),(104,103),(106,105),(108,107),(110,109),(112,111),(114,113),(116,115),(118,117),(120,119),(122,121),(124,123),(126,125),(128,127),(130,129)]),130)

    describe "addMiniEdges" $ do
        it "sample01" $ do
            let (nodesWithMiniNodes,edgesHavingMiniNodes,nodeToOuterMiniNode,nodeToInnerMiniNode,miniNodeToParentNode,innerToOuter,sizeOfNodes) = createRotateBaseEdges graph_nodes graph_edges
            addMiniEdges [1..18] calcDepartCostFromAngle nodeToOuterMiniNode nodeToInnerMiniNode `shouldBe` [(130,129,Cost 1.0),(126,125,Cost 1.0),(122,121,Cost 1.0),(110,121,Cost 0.16666667),(102,121,Cost 0.6666667),(122,109,Cost 0.16666667),(110,109,Cost 1.0),(102,109,Cost 0.50000006),(122,101,Cost 0.6666667),(110,101,Cost 0.50000006),(102,101,Cost 1.0),(120,119,Cost 1.0),(118,119,Cost 0.0),(98,119,Cost 0.6666667),(120,117,Cost 0.0),(118,117,Cost 1.0),(98,117,Cost 0.33333334),(120,97,Cost 0.6666667),(118,97,Cost 0.33333334),(98,97,Cost 1.0),(116,115,Cost 1.0),(114,115,Cost 0.0),(94,115,Cost 0.33333328),(116,113,Cost 0.0),(114,113,Cost 1.0),(94,113,Cost 0.6666667),(116,93,Cost 0.33333328),(114,93,Cost 0.6666667),(94,93,Cost 1.0),(112,111,Cost 1.0),(106,111,Cost 0.16666667),(90,111,Cost 0.6666667),(112,105,Cost 0.16666667),(106,105,Cost 1.0),(90,105,Cost 0.5),(112,89,Cost 0.6666667),(106,89,Cost 0.5),(90,89,Cost 1.0),(128,127,Cost 1.0),(108,127,Cost 0.16666667),(86,127,Cost 0.33333334),(62,127,Cost 0.5833333),(128,107,Cost 0.16666667),(108,107,Cost 1.0),(86,107,Cost 0.49999997),(62,107,Cost 0.24999999),(128,85,Cost 0.33333334),(108,85,Cost 0.49999997),(86,85,Cost 1.0),(62,85,Cost 0.75),(128,61,Cost 0.5833333),(108,61,Cost 0.24999999),(86,61,Cost 0.75),(62,61,Cost 1.0),(124,123,Cost 1.0),(104,123,Cost 0.16666663),(70,123,Cost 0.6666667),(30,123,Cost 0.9166667),(124,103,Cost 0.16666663),(104,103,Cost 1.0),(70,103,Cost 0.49999997),(30,103,Cost 0.25000003),(124,69,Cost 0.6666667),(104,69,Cost 0.49999997),(70,69,Cost 1.0),(30,69,Cost 0.75),(124,29,Cost 0.9166667),(104,29,Cost 0.25000003),(70,29,Cost 0.75),(30,29,Cost 1.0),(100,99,Cost 1.0),(96,99,Cost 0.6666667),(82,99,Cost 0.49999997),(78,99,Cost 0.16666663),(100,95,Cost 0.6666667),(96,95,Cost 1.0),(82,95,Cost 0.1666666),(78,95,Cost 0.5),(100,81,Cost 0.49999997),(96,81,Cost 0.1666666),(82,81,Cost 1.0),(78,81,Cost 0.33333334),(100,77,Cost 0.16666663),(96,77,Cost 0.5),(82,77,Cost 0.33333334),(78,77,Cost 1.0),(92,91,Cost 1.0),(88,91,Cost 0.6666667),(74,91,Cost 0.5),(66,91,Cost 0.16666667),(92,87,Cost 0.6666667),(88,87,Cost 1.0),(74,87,Cost 0.16666663),(66,87,Cost 0.49999997),(92,73,Cost 0.5),(88,73,Cost 0.16666663),(74,73,Cost 1.0),(66,73,Cost 0.33333334),(92,65,Cost 0.16666667),(88,65,Cost 0.49999997),(74,65,Cost 0.33333334),(66,65,Cost 1.0),(84,83,Cost 1.0),(80,83,Cost 0.50000006),(58,83,Cost 0.5),(54,83,Cost 0.1666666),(84,79,Cost 0.50000006),(80,79,Cost 1.0),(58,79,Cost 0.31830987),(54,79,Cost 0.66666657),(84,57,Cost 0.5),(80,57,Cost 0.31830987),(58,57,Cost 1.0),(54,57,Cost 0.33333334),(84,53,Cost 0.1666666),(80,53,Cost 0.66666657),(58,53,Cost 0.33333334),(54,53,Cost 1.0),(76,75,Cost 1.0),(72,75,Cost 0.33333328),(50,75,Cost 0.6666667),(42,75,Cost 0.31830987),(76,71,Cost 0.33333328),(72,71,Cost 1.0),(50,71,Cost 0.31830987),(42,71,Cost 0.6666667),(76,49,Cost 0.6666667),(72,49,Cost 0.31830987),(50,49,Cost 1.0),(42,49,Cost 0.33333328),(76,41,Cost 0.31830987),(72,41,Cost 0.6666667),(50,41,Cost 0.33333328),(42,41,Cost 1.0),(68,67,Cost 1.0),(64,67,Cost 0.5),(38,67,Cost 0.16666663),(26,67,Cost 0.49999997),(68,63,Cost 0.5),(64,63,Cost 1.0),(38,63,Cost 0.6666667),(26,63,Cost 0.0),(68,37,Cost 0.16666663),(64,37,Cost 0.6666667),(38,37,Cost 1.0),(26,37,Cost 0.33333334),(68,25,Cost 0.49999997),(64,25,Cost 0.0),(38,25,Cost 0.33333334),(26,25,Cost 1.0),(60,59,Cost 1.0),(56,59,Cost 0.75),(46,59,Cost 0.5833333),(60,55,Cost 0.75),(56,55,Cost 1.0),(46,55,Cost 0.8333334),(60,45,Cost 0.5833333),(56,45,Cost 0.8333334),(46,45,Cost 1.0),(52,51,Cost 1.0),(48,51,Cost 0.33333334),(44,51,Cost 0.8333333),(34,51,Cost 0.16666667),(52,47,Cost 0.33333334),(48,47,Cost 1.0),(44,47,Cost 0.1666666),(34,47,Cost 0.8333333),(52,43,Cost 0.8333333),(48,43,Cost 0.1666666),(44,43,Cost 1.0),(34,43,Cost 0.0),(52,33,Cost 0.16666667),(48,33,Cost 0.8333333),(44,33,Cost 0.0),(34,33,Cost 1.0),(40,39,Cost 1.0),(36,39,Cost 0.33333334),(32,39,Cost 0.8333333),(22,39,Cost 0.16666667),(40,35,Cost 0.33333334),(36,35,Cost 1.0),(32,35,Cost 0.16666663),(22,35,Cost 0.8333333),(40,31,Cost 0.8333333),(36,31,Cost 0.16666663),(32,31,Cost 1.0),(22,31,Cost 0.0),(40,21,Cost 0.16666667),(36,21,Cost 0.8333333),(32,21,Cost 0.0),(22,21,Cost 1.0),(28,27,Cost 1.0),(24,27,Cost 0.75),(20,27,Cost 0.5833333),(28,23,Cost 0.75),(24,23,Cost 1.0),(20,23,Cost 0.8333333),(28,19,Cost 0.5833333),(24,19,Cost 0.8333333),(20,19,Cost 1.0)]

    describe "addParentEdges" $ do
        it "sample01" $ do
            let (nodesWithMiniNodes,edgesHavingMiniNodes,nodeToOuterMiniNode,nodeToInnerMiniNode,miniNodeToParentNode,innerToOuter,sizeOfNodes) = createRotateBaseEdges graph_nodes graph_edges
            addParentEdges nodeToOuterMiniNode nodeToInnerMiniNode (StartPoint 17) (EndPoint 18) `shouldBe` [(130,18,Cost 0.0),(17,125,Cost 0.0)]

    describe "refinePath" $ do
        it "sample01" $ do
            let (_,_,_,_,miniNodeToParentNode,_,_) = createRotateBaseEdges graph_nodes graph_edges
            let children = [17,125,124,103,106,111,114,115,118,119,122,109,108,127,130,18]
            refinePath miniNodeToParentNode children `shouldBe` [17,10,12,13,14,15,11,18]
